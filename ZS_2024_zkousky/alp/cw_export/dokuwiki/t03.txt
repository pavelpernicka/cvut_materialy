====== Cvičení 3: Funkce ======




==== Opakování cyklů ====


=== Ramanujan Taxi ===

  * [[https://cs.wikipedia.org/wiki/Srinivasa_Ramanujan|Ramanujan]] (1887-1920) byl velmi zajímavý geniální indický matematik. Byl objeven prof. Hardym a pozván do Anglie. Zde onemocněl a když ho prof. Hardy navštívil v nemocnici, řekl mu, že za ním přijel taxíkem číslo XXXX. Ramanujan mu okamžitě odpověděl, že je to velmi zajímavé číslo, protože je to nejmenší číslo, které lze zapsat dvěma různými způsoby jako součet dvou krychlí (třetích mocnin přirozených čísel). 
  * Najděte čtyřciferné číslo taxíku XXXX.


==== Funkce ====

Při programování často potřebujeme vykonat určité operace opakovaně. K tomu se hodí tzv. funkce.
  * Funkce je seskupení příkazů
  * Vstupem funkce jsou argumenty (jsou nepovinné)
  * Složitý problém se typicky rozdělí na jednodušší úkony, které se naprogramují do funkcí
  * Takový kód je snáze udržovatelný/čitelný 
  * Funkce mohou obsahovat lokální proměnné, které "nejsou vidět" ve zbytku programu
  * V Pythonu se funkce definují klíčovým slovem ''def'' a tělo funkce (vnitřní příkazy) jsou odsazeny  
  
<code python>
def jmenoFunkce( parametry ):
   telo_funkce
</code>

Maximum ze dvou čísel:

<code python>
def maximum(x,y):
    if x>y:
        return x
    else:
        return y  
</code>

  * klíčové slovo ''return'' vrací výsledek funkce. Příklad volání této funkce:
   
<code python>
max = maximum(2,0.5)
print(max)

# nebo rovnou muzeme predat jiné funkci
a = 6
b = 7
print("Maximum z ",a," a ", b, " je ", maximum(a,b))
</code>

  * Parametry jsou nepovinné. Funkci bez parametrů definmujeme s prázdnými závorkami

<code python>
def hello():
    print("Hello World!")
</code>

   * V tomto případě funkce ani nevrací žádnou hodnotu (pouze vypíše řetězec), není tedy třeba volat ''return''
   * Volání funkce bez parametrů

<code python>
hello()
</code>

  * Funkce v Pythonu mohou vracet více parametrů
  * Příklad: funkce vracející maximum ze dvou čísel, s informací o tom, jestli maximem je 1. nebo 2. argument  
<code python>
def maximum2(x,y):
    if (x > y):
        return x, True
    else:
        return y, False  
 </code>

   * Volání
<code python>
maxValue, info = maximum2(5,6)

#zkusime predat printu:
print("Maximum z 5,6 je ", maximum2(5,6))
</code>

=== Funkce quit() ===
   * Pokud není uvedeno jinak, program končí po vykonání posledního příkazu
   * Někdy se hodní ukončit program dříve, např. při špatně zadaném vstupu.
   * K tomu slouží funkce ''quit()''
   
<code python>
if (spatny_vstup):
    quit()
</code>   

=== Dosud jsme se setkali s několika funkcemi: ===
  * ''input()'' - načte řetězec ze standardního vstupu
  * ''print( argumenty )'' - tiskne řetězec na standardní výstup
  * ''int( argument )'' - převod na celé číslo
  * ''float( argument )'' - převod na reálné číslo
  * ''str( argument )'' - převod na řetězec
  * ''quit()'' - ukončí běh programu
  
==== Absolutní hodnota ====

   * Napište funkci s jedním argumentem, která vrací absolutní hodnotu tohoto argumentu



==== Sexy prvočísla ====

  * [[https://en.wikipedia.org/wiki/Sexy_prime|Sexy prime]] jsou takové dvojice prvočísel, jejichž (kladný) rozdíl je 6. Například 5 a 11 jsou prvočísla a zároveň se liší o 6, tedy dvojice (5,11) jsou tzv. sexy-primes. 
  * Napište program, který vypíše všechny takové dvojice menší než 1000.

==== Dokonalá čísla ====

   * [[https://en.wikipedia.org/wiki/Perfect_number|Dokonalé číslo]] je takové číslo, které je součtem všech svých dělitelů (kromě sebe samotného samozřejmě).
   * Například číslo 6 je dokonalé, neboť 6 = 1 + 2 + 3, kde 1,2,3 jsou dělitelé čísla 6.
   * Napište program, který vypíše všechna dokonalá čísla od 1 do 10000.

==== Super-dokonalá čísla ====
   * [[https://en.wikipedia.org/wiki/Superperfect_number|Super-dokonalá čísla]] jsou zobecněním dokonalých čísel.
   * Číslo $n$ je super-dokonalé, pokud platí $f(f(n)) = 2n$, kde $f(n)$ je součet dělitelů čísla $n$ od 1 do $n$ (včetně $n$).
   *  Například pro číslo 4: dělitelé jsou $1,2$ a $4$, tedy $f(4)=1+2+4=7$. Dělitelé 7 jsou 1 a 7, tedy $f(7)=1+7=8$, což je $2\times4$. Číslo 4 je tedy super-dokonalé.
   * Napište funkci ''soucet_delitelu'', která spočte součet dělitelů čísla $n$, tedy funkci $f(n)$. 
   * Funkci ''soucet_delitelu'' použijte v programu, který vypíše seznam super-dokonalých čísel od 1 do 10000.

==== Největší společný dělitel ====
   * Napište funkce ''gcd1(a,b)'' a ''gcd2(a,b)'', které vrátí největšího společného dělitele čísel $a$ a $b$.
   * Funkce gcd1 bude počítat největšího společného dělitele čísel $a$ a $b$ takto:
     * Dokud a není rovno b
       * Je-li a větší než b
         * a = a-b
       * jinak
         * b = b-a
     * a i b jsou největší společný dělitel původních čísel
   * Funkce gcd2 bude počítat největšího společného dělitele čísel následovně:
     * Dokud b není rovno nule
       * t = b
       * b = a mod b
       * a = t
     * a je největší společný dělitel původních čísel
   * Zjistěte kolik kroků potřebuje gcd1 a gcd2 pro spočtení největšího společného dělitele 6997193,18992381 a dvojice 361,18992381







==== Césarova šifra ====
  * Napište program pro realizaci tzv. Césarovy šifry
  * Vstup: dvě řádky
    * 1. řádka: textový řetězec (pouze písmena a mezery)
    * 2. řádka: číslo definující posunutí písmen v Césarově šifře
  * Program na výstup vypíše vstupní řetězec zašifrovaný posunutím písmen o zadanou hodnotu
  * Ascii hodnota znaku se získá funkcí ''ord('A')'', opačně znak z celého čísla získáte funkcí  ''chr(65)''
  * Je nutné posouvat velká písmena na velká písmena, malá písmena na malá písmena a mezeru ponechat jako mezeru




===== Témata k procvičení =====


  * Napište funkci ''convert_num_to_month'', která dostane jako parametr pořadové číslo měsíce v roku a vrátí jeho jméno.
    * Napište funkci ''convert_month_to_num'', která dostane jako parametr jméno měsíce v roku a vrátí jeho pořadové číslo v roce.
    * Předpoklad: leden má číslo 1, prosinec 12
    * Tuto funkci použijte v programu, který načte řetězec
      * Pokud je první znak písmeno, vytiskne se na obrazovku číslo měsíce
      * Pokud je první znak číslo vytiskne se název měsíce
    * Pomůcka: V programu můžete využít následující proměnnou:
<code python>
month=['leden','unor','brezen','duben','kveten','cerven','cervenec','srpen','zari','rijen','listopad','prosinec']
</code>





  * Napište program, který porovná dvě funkce ''a(x,y,z)'' a ''b(x,y,z)'' se třemi logickými proměnnými a zjistí, zda výrazy jsou ekvivalentní, případně vypíše pro jaké kombinace vstupů se výstupy liší. Porovnejte následující funkce:
<code python>
def a(x,y,z):
    return (x and y) or (not y and z)
    
def b(x,y,z):
    return x or z
</code>


  * Napište funkci, která vypisuje 1,-1,1,-1 ...
  * Napište funkci, která vypisuje výsledek operace $(-1)^k$ pro $k=0,\ldots,100$. Zamyslete se nad rychlostem výpočtu, navrhněte alternativní postupy
  * Napište funkci ''min(a,b)'', která vrací minimum z těchto dvou prvků (proměnné jsou čísla).
  * Napište funkci ''max(a,b)''
  * Napište funkci ''area(radius)'', která vypočítá obsah kruhu o zadaném poloměru 
  * Napište funkci ''d2r(angle)'', která převede stupně na radiány "degrees to radians = d2r"
  * Napište funkci ''r2d(angle)'', která převede radiány na stupně
  * Napište funkci ''normalize(angle)'', která převede zadaný úhel (v radiánech) do intervalu $<0, 2\pi)$
  * Napište funkci pro výpis pole:
      * s využitím cyklu ''for''
      * s využitím cyklu ''while''


  * Rozšiřte program na výpočet Sexy-prvočísel tak, aby vypisoval trojice prvočísel, které se od sebe liší o 6 - taková trojice je např. (5,11,17).
  * Dále rozšiřte tento program pro výpočet čtveřic (např. (61,67,73,79) ).


===== Domácí úkol =====

{{ :courses:b3b33alp:cviceni:l_zadani_03.pdf | Lehká úloha}}

{{ :courses:b3b33alp:cviceni:h_zadani_03.pdf | Těžká úloha}}

